name: CI/CD

on:
  push:
    branches:
      - main
      - '**'
  pull_request:
  workflow_dispatch:

jobs:
  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies for testing
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install .

      - name: Run tests with timeout
        run: pytest --timeout=10

  docs_build:
    name: Build Documentation Package
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies for docs
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install -r requirements-dev.txt

      - name: Build Documentation
        working-directory: docs
        run: make html #SPHINXOPTS="-W"

      - name: Package Documentation as DEB
        run: make deb

      - name: Upload Docs Artifact
        uses: actions/upload-artifact@v4
        with:
          name: flowno-docs-deb
          path: dist/*.deb

  docs_deploy:
    name: Deploy Documentation Package
    runs-on: ubuntu-latest
    needs: docs_build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download Docs Artifact
        uses: actions/download-artifact@v4
        with:
          name: flowno-docs-deb

      - name: Determine Deployment Package Name
        id: get_deb_name
        run: |
          # Adjust the pattern if your .deb package name is different.
          DEB_NAME=$(basename dist/flowno-docs_0.1.3_all.deb)
          echo "DEB_NAME=$DEB_NAME" >> $GITHUB_ENV
          echo "Package name is $DEB_NAME"

      - name: Setup Private Key for Deployment
        env:
          PRIVKEYENCRYPTED: ${{ secrets.DEPLOY_PRIVKEY_GPG_PASSWORD }}
        run: |
          gpg --quiet --batch --yes --decrypt --passphrase="$PRIVKEYENCRYPTED" --output github_id_rsa deployment-ci/github_id_rsa.gpg
          chmod 600 github_id_rsa

      - name: Upload Documentation Package to Server
        run: |
          scp -P 48231 -i github_id_rsa -o UserKnownHostsFile=deployment-ci/known_hosts $DEB_NAME root@computemachines.com:$DEB_NAME
        env:
          DEB_NAME: ${{ env.DEB_NAME }}

      - name: Install Documentation Package on Server
        run: |
          ssh -p 48231 -T -i github_id_rsa -o UserKnownHostsFile=deployment-ci/known_hosts root@computemachines.com dpkg -i $DEB_NAME
        env:
          DEB_NAME: ${{ env.DEB_NAME }}
      - name: Reload Daemon and Restart Nginx
        run: |
          ssh -p 48231 -T -i github_id_rsa -o UserKnownHostsFile=deployment-ci/known_hosts root@computemachines.com "systemctl daemon-reload && systemctl restart nginx"
